@model University

@{
    ViewData["Title"] = "Create";
}

<h1>Create</h1>

<h4>University</h4>
<hr />


<div class="row">
    <div class="col-md-4">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            @* below code hide the input place and give a default value for "SchoolID", we need because ModelState.IsValid will be false otherwise*@


            <div class="form-group" style="display: none;">
                <label asp-for="SchoolID" class="control-label"></label>
                <input asp-for="SchoolID" class="form-control" value="DefaultSchoolID" />
                <span asp-validation-for="SchoolID" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="Name" class="control-label"></label>
                <input asp-for="Name" id="nameInput" class="form-control" />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Location" class="control-label"></label>
                <input asp-for="Location" id="locationInput" class="form-control" />
                <span asp-validation-for="Location" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Create" id="submitButton" class="btn btn-primary" />
            </div>
        </form>
    </div>

    <div class="col-md-6 col-md-offset-2">

     
        <p>
            Existing university:<br />
        </p>

        <p>
            <strong>Name:</strong> Lund University, <strong>Location:</strong> Lund
        </p>
        <p>

        <strong>Name:</strong> Lulea University, <strong>Location:</strong> Lulea
        </p>
        <p>

            <strong>Name:</strong> Karolinska Institutet, <strong>Location:</strong> Stockholm
        </p>
        </p>
        <p>

            <strong>Name:</strong> Karlstad University, <strong>Location:</strong> Karlstad
        </p>
       
    </div>
</div>


@*<div>
            <a asp-action="Index">Back to List</a>
            </div>*@

<a href="@Url.Content("/Document/Create")">Back to upload documents</a>

<div>
    <p>My skills used in this page include:</p>

<ol>
  <li><strong>Model Binding</strong>: In the Create method of the UniversityController, the <code>[Bind]</code> attribute is used to specify the properties to bind from the HTTP request to the <code>University</code> model. This technique helps prevent overposting attacks and ensures that only the specified properties are bound.</li>
  
  <li><strong>Form Validation</strong>: The view includes <code>&lt;span&gt;</code> tags, which display error messages generated by the model validation. In the Create method of the UniversityController, <code>ModelState.IsValid</code> is checked to ensure that the model passed to the action is valid based on the validation rules defined in the model class.</li>
  
  <li><strong>Partial View</strong>: The <code>_ValidationScriptsPartial</code> partial view is rendered in the Scripts section of the Create.cshtml view. This partial view includes the necessary client-side validation scripts that are automatically generated based on the model validation attributes.</li>
  
  <li><strong>AJAX Request</strong>: The JavaScript code in the Create.cshtml view sends an AJAX request to the <code>ifUniversityExist</code> action in the DocumentController. This technique is used to check if a university with the given name and location already exists in the database without submitting the form. The response from the action is handled in the <code>then</code> block to display a message to the user.</li>
  
  <li><strong>Redirection</strong>: After successfully creating a university, the Create action in the UniversityController uses <code>RedirectToAction</code> to redirect the user to the <code>UniversityCreateSuccess</code> action in the UniversityController. This technique provides a seamless user experience and separates the logic for different actions.</li>
  
  <li><strong>Entity Framework Core</strong>: The UniversityController interacts with the UniversityContext to perform database operations using Entity Framework Core. The controller's constructor injects the UniversityContext dependency, allowing access to the underlying database.</li>
  
  <li><strong>Debugging and Logging</strong>: The UniversityController includes examples of logging validation errors using <code>System.Diagnostics.Debug.WriteLine</code>. This technique can help with debugging and tracking issues during development.</li>
</ol>

<p>These techniques demonstrate my understanding of ASP.NET Core MVC, model binding, form validation, partial views, AJAX requests, redirection, database operations using Entity Framework Core, and debugging/logging practices.</p>



</div>


@section Scripts {
  

    <script>
        //To prevent the user from submitting the form if the university name already exists with given location
        document.getElementById('submitButton').addEventListener('click', function (event) {
            event.preventDefault(); // Prevents the form from submitting immediately

            var name = document.getElementById('nameInput').value;
                console.log("Here is good.");

            var locationValue = document.getElementById('locationInput').value;

            fetch(`/Document/ifUniversityExist?givenName=${name}&givenLocation=${locationValue}`)
                .then(function (response) {
                    return response.json();
                })
                .then(function (data) {
                    if (data.length > 0) {
                        alert('The university name already exist with given location.');
                    } else {
                     
                       nameInput.form.submit();
                        // Submit the form if the name doesn't exist
                      
                    }
                })
                .catch(function (error) {
                    console.log(error);
                });
        });

         
    </script>

    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}
